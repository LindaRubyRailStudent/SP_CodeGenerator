<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="System.Xml"#>
<#@ Assembly Name="System.Xml.Linq"#>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="C:\webtech\THESIS\TsqlParser\TsqlParser\bin\Debug\TsqlParser.dll" #>
<#@ assembly name="C:\Sp_CodeGenerator\ExtensionMethods\obj\x86\Debug\ExtensionMethods.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml"#>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Windows.Forms" #>
<#@ import namespace="EnvDTE" #>
<#@ include file="EF.Utility.CS.ttinclude"#>

<#
	// reads in the Xml file
	string SampleInputFile = System.IO.File.ReadAllText(this.Host.ResolvePath(@"dbo.SelectWhereNoParams.StoredProcedure.sql.xml"));
	MetadataLoader loader = new MetadataLoader(this);
	string inputFile = @"c:\Sp_CodeGenerator\AWorks_Database\Model1.edmx";
	EdmItemCollection itemCollection = loader.CreateEdmItemCollection(inputFile);
	var entityCollection = itemCollection.GetItems< System.Data.Metadata.Edm.EntityType>();
	string EFXmlFiile = System.IO.File.ReadAllText(this.Host.ResolvePath(@"XMLFiles\Model1xml.xml"));
	XDocument EfXmlXDoc = Parse(EFXmlFiile);

	//Parses the Stored Procedures to XML files and saves them to the Templates\XMLFiles Folder
	//TsqlParser.ParseSql p = new TsqlParser.ParseSql();
	//p.Main();

#>

// This is the output code from your template
// you only get syntax-highlighting here - not intellisense
namespace Sp_CodeGenerator{
	using System;
	using System.Collections.Generic;
	using AWorks;
	using System.Linq;


 public class MyGeneratedClass{
	private AWorksLTEntities db = new AWorksLTEntities();
	<# XDocument XmlDoc = Parse(SampleInputFile);
	//List<ExtensionMethods.Token> listTokens = ExtensionMethods.ExtensionMethods.getToken(XmlDoc);
	//String classString = createClass(listTokens);
	ExtensionMethods.ProcDef procedureDef = ExtensionMethods.ProcDef.getProcDef(XmlDoc);
	ExtensionMethods.SelectClause selectClause = ExtensionMethods.SelectClause.getSelectClause(XmlDoc);
	ExtensionMethods.FromClause fromClause = ExtensionMethods.FromClause.getFromClause(XmlDoc);
	ExtensionMethods.OrderByClause orderClause = ExtensionMethods.OrderByClause.getOrderBy(XmlDoc);
	List<ExtensionMethods.WhereClause> whereClause = ExtensionMethods.WhereClause.getWhereClause(XmlDoc);

	string classString = writeClass(procedureDef, selectClause, fromClause, orderClause, whereClause);
	#>

	<#= classString #>
  }
}

<#+
	///<summary>ParseFile
	///returns the input string file as an XDocument
	///</summary>
	///<param> string of Parsed SQL expressed as XML</param>
	///<returns> XDocument </returns>
private XDocument Parse(string Input){ 
	XDocument XmlDoc = System.Xml.Linq.XDocument.Parse(Input);
	return XmlDoc;
}

private string createClass(List<ExtensionMethods.Token> listTokens)
		{
			StringBuilder sb = new StringBuilder();
			List<ExtensionMethods.Token> p = ExtensionMethods.ExtensionMethods.gParams(listTokens);
			
			List<string> repositoryVariable = ExtensionMethods.ExtensionMethods.gRepVariable(p);
			sb.Append("public IList<Product> GetProducts(int unitsInStock, int unitPrice, string productName){").AppendLine();
			sb.Append("var products = from p in db.Products").AppendLine();
			sb.Append("where p.UnitsInStock >= unitsInStock").AppendLine();
			sb.Append("&& p.UnitPrice = unitPrice || p.ProductName = productName").AppendLine();
			sb.Append("select new {p.UnitsInStock, p.UnitPrice, p.ProductName};").AppendLine();
			sb.Append("return products as IList<Product>;}"); 
			return sb.ToString();
		}

private string writeClass(ExtensionMethods.ProcDef procedureDef, 
							ExtensionMethods.SelectClause selectClause, 
							ExtensionMethods.FromClause fromClause, 
							ExtensionMethods.OrderByClause orderBy, 
							List<ExtensionMethods.WhereClause> whereClause)
		{
		StringBuilder sb = new StringBuilder();
		sb.Append("public IList<Product> " + procedureDef.ObjectName + "()").AppendLine();
		sb.Append("	{").AppendLine();
		sb.Append("		var " + ExtensionMethods.ExtensionMethods.Pluralise(fromClause._tableAlias.FirstOrDefault().ToLower()) + "  = from p in db." + ExtensionMethods.ExtensionMethods.Pluralise(fromClause._tableAlias.FirstOrDefault()) + "").AppendLine();		
		if(orderBy._orderby.Count != 0){
			foreach(var l in orderBy._orderby){
			sb.Append("					orderby p." + l.Key + " " + l.Value.ToLower()).AppendLine();
            }
		}
		if(whereClause.Count() != 0){
			for (int i = 0; i<whereClause.Count(); i++){
				sb.Append("					"+whereClause[i]._binaryBoolean + "   p." + whereClause[i]._operator + " " + whereClause[i]._searchCondition + " " + whereClause[i]._expression.Key ).AppendLine();
            }
        }

		sb.Append("					select new {");	
			foreach(var c in selectClause._columnName){
				sb.Append("p."+c + ", ");
			}	
		sb.Append("};").AppendLine();
		sb.Append("					return " + ExtensionMethods.ExtensionMethods.Pluralise(fromClause._tableAlias.FirstOrDefault().ToLower())+" as IList<Product>;").AppendLine();
		sb.Append("	}");
		return sb.ToString();
        }
#>