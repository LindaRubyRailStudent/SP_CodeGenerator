<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="System.Xml"#>
<#@ Assembly Name="System.Xml.Linq"#>
<#@ assembly name="C:\webtech\THESIS\TsqlParser\TsqlParser\bin\Debug\TsqlParser.dll" #>
<#@ assembly name="C:\Sp_CodeGenerator\ExtensionMethods\obj\x86\Debug\ExtensionMethods.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml"#>
<#@ import namespace="System.Xml.Linq" #>
<#@ include file="EF.Utility.CS.ttinclude"#> 

<#
	var fileManager = EntityFrameworkTemplateFileManager.Create(this);
	/// Instantiates a 
	TsqlParser.ParseSql sqlParser = new TsqlParser.ParseSql();
	sqlParser.Main();
#>

<#
	DirectoryInfo directory = new DirectoryInfo(this.Host.ResolvePath(@"CompletedXmlFiles\"));
	foreach(FileInfo file in directory.GetFiles())
	{
		//create a new file for each 
		string fileName = file.Name;
		fileManager.StartNewFile(fileName + ".cs");

		//create a new XmlDocument and read in each xmlfile
		XmlDocument xmlDoc = new XmlDocument();
		xmlDoc.Load(@"C:\Sp_CodeGenerator\Sp_CodeGenerator\Templates\CompletedXmlFiles\" +fileName);

		//Load in EntityFramework Edmx file
		MetadataLoader loader = new MetadataLoader(this);
		string inputFile = @"c:\Sp_CodeGenerator\AWorks\Model1.edmx";
		EdmItemCollection itemCollection = loader.CreateEdmItemCollection(inputFile);
		var EntityCollection = itemCollection.GetItems<System.Data.Metadata.Edm.EntityType>();
		EntityContainer container = itemCollection.GetItems<EntityContainer>().FirstOrDefault();

		// Get Parameter Objects
		ExtensionMethods.SqlParameter parameter = new ExtensionMethods.SqlParameter();
		List<ExtensionMethods.SqlParameter> parameters = parameter.getSqlParameter(xmlDoc);
		String arguments = parameter.getArguments(parameters);
		
		// Get Variables
		List<ExtensionMethods.SqlScalarVariableRefExpression> variables = new ExtensionMethods.SqlScalarVariableRefExpression().getVariables(xmlDoc,parameters);


		/// From Clause Objects
		List<object> fromclause = new ExtensionMethods.WalkNodes().ReadNodes(xmlDoc, "SqlFromClause");
		List<ExtensionMethods.SqlComparisonBooleanExpression> sqlCompBoolList = new ExtensionMethods.SqlComparisonBooleanExpression().getSqlCompBool(fromclause);
		List<ExtensionMethods.SqlConditionClause> sqlCondition = new ExtensionMethods.SqlConditionClause().getSqlCondition(fromclause);
		List<ExtensionMethods.SqlObjectIdentifier> sqlObjectID = new ExtensionMethods.SqlObjectIdentifier().getSqlObjectIdentifier(fromclause);
		List<ExtensionMethods.SqlQualifiedJoinTableExpression> sqlQualifiedJoin = new ExtensionMethods.SqlQualifiedJoinTableExpression().getSqlQualifiedJoin(fromclause);
		List<ExtensionMethods.SqlScalarRefExpression> sqlScalarRef = new ExtensionMethods.SqlScalarRefExpression().getSqlScalarRef(fromclause);
		List<ExtensionMethods.SqlTableRefExpression> sqlTableRef = new ExtensionMethods.SqlTableRefExpression().getSqlTableRef(fromclause);		
		ExtensionMethods.FromClause frClause = new ExtensionMethods.FromClause();
		String fromComment = fromclause.First().ToString();
		String fromstring = frClause.writeFromClause(sqlCompBoolList, sqlCondition, sqlObjectID, sqlQualifiedJoin, sqlScalarRef, sqlTableRef, fromComment);

		/// Select Clause Object
		List<object> selectClauseList = new ExtensionMethods.WalkNodes().ReadNodes(xmlDoc, "SqlSelectClause");
		List<ExtensionMethods.SqlSelectScalarExpression> selectScalarList = new  ExtensionMethods.SqlSelectScalarExpression().getSqlSelectScalarExpression(selectClauseList);
		List<ExtensionMethods.SqlScalarRefExpression> scalarRefList = new ExtensionMethods.SqlScalarRefExpression().getSqlScalarRef(selectClauseList);
		List<ExtensionMethods.SqlIdentifier> sqlIdentifierList = new ExtensionMethods.SqlIdentifier().getSqlIdentifier(selectClauseList);
		List<ExtensionMethods.SqlBinaryScalarExpression> binaryScalarList = new ExtensionMethods.SqlBinaryScalarExpression().getSqlBinaryExpression(selectClauseList);
		List<ExtensionMethods.SqlColumnRefExpression> columnRefList  = new ExtensionMethods.SqlColumnRefExpression().getSqlColumnRefExpression(selectClauseList);
		List<ExtensionMethods.SqlSelectStarExpression> sqlStar = new ExtensionMethods.SqlSelectStarExpression().getSqlSelectStar(selectClauseList);
		ExtensionMethods.SqlSelectClause sqlSelect = new ExtensionMethods.SqlSelectClause().gSelectClause(selectClauseList);
		string selectComment =selectClauseList.First().ToString();
		string selectstring = new ExtensionMethods.SelectClause().writeSelectClause(selectScalarList, scalarRefList, sqlIdentifierList, binaryScalarList, columnRefList, sqlStar, sqlSelect, selectComment);
		
		/// Stored Procedure Definition
		string procedureDef = new ExtensionMethods.ProcDef().getProcDef(xmlDoc);

		/// Get Return Type from the Edmx File
		string returnResult = new ExtensionMethods.ReturnResult().getReturnResult(xmlDoc);

		/// Where Clause Objects
		List<object> whereNodes = new ExtensionMethods.WalkNodes().ReadNodes(xmlDoc, "SqlWhereClause");
		List<ExtensionMethods.SqlBinaryBooleanExpression> binaryBooleanList = new ExtensionMethods.SqlBinaryBooleanExpression().getBinaryBoolean(whereNodes);
		List<ExtensionMethods.SqlComparisonBooleanExpression> comparisonBoolList = new ExtensionMethods.SqlComparisonBooleanExpression().getSqlCompBool(whereNodes);
		List<ExtensionMethods.SqlLiteralExpression> literalList = new ExtensionMethods.SqlLiteralExpression().getSqlLiteral(whereNodes);
		List<ExtensionMethods.SqlColumnRefExpression> whereColumnRefList = new ExtensionMethods.SqlColumnRefExpression().getSqlColumnRefExpression(whereNodes);
		List<ExtensionMethods.SqlScalarRefExpression> whereScalarRef = new ExtensionMethods.SqlScalarRefExpression().getSqlScalarRef(whereNodes);
		ExtensionMethods.WhereClause whereClause = new ExtensionMethods.WhereClause();
		List<ExtensionMethods.SqlBetweenBooleanExpression> betweenBool = new ExtensionMethods.SqlBetweenBooleanExpression().getBetweenBoolean(xmlDoc);
		List<ExtensionMethods.SqlLikeBooleanExpression> likeBool = new ExtensionMethods.SqlLikeBooleanExpression().getSqlLikeBoolean(xmlDoc);
		string whereComment = whereClause.getWhereComment(whereNodes);
		string whereString = whereClause.writeWhereClause(binaryBooleanList, comparisonBoolList, literalList, whereColumnRefList, whereScalarRef, variables, whereComment, xmlDoc, betweenBool, likeBool);


		///Get OrderByClause Objects
		List<object> orderbyNodes = new ExtensionMethods.WalkNodes().ReadNodes(xmlDoc, "SqlOrderByClause");
		List<ExtensionMethods.SqlOrderByItem> orderbyList = new ExtensionMethods.SqlOrderByItem().getSqlOrderBy(orderbyNodes);
		List<ExtensionMethods.SqlColumnRefExpression> orderyBycolumnRef = new ExtensionMethods.SqlColumnRefExpression().getSqlColumnRefExpression(orderbyNodes);
		List<ExtensionMethods.SqlScalarRefExpression> orderByScalarRef = new ExtensionMethods.SqlScalarRefExpression().getSqlScalarRef(orderbyNodes);
		ExtensionMethods.OrderByClause orderByClause = new ExtensionMethods.OrderByClause();
		string orderByComment = orderByClause.getOrderByComment(orderbyNodes);
		string orderbyString = orderByClause.writeOrderByClause(orderbyList, orderyBycolumnRef, orderByScalarRef, orderByComment);
#>

// This is the output code from your template
// you only get syntax-highlighting here - not intellisense
namespace Sp_CodeGenerator{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using DataBaseLayer;


 public class <#= procedureDef #> {
	private AWorksLTEntities db = new AWorksLTEntities();

	public List<<#= procedureDef #>_Result> <#= procedureDef #>_Method(<#= arguments #>){
				<#= fromstring #>
				<#= whereString #>
				<#= orderbyString #>
				<#= selectstring #>
				<#= returnResult #>
			}
		}
	}

<# 
  }
	fileManager.Process();

 #>
 
<#+
  	///<summary>ParseFile
	///returns the input string file as an XDocument
	///</summary>
	///<param> string of Parsed SQL expressed as XML</param>
	///<returns> XDocument </returns>
	private XDocument Parse(string Input){ 
		XDocument XmlDoc = System.Xml.Linq.XDocument.Parse(Input);
		return XmlDoc;
}
#>