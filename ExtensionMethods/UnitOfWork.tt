<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly name="System.Xml" #>
<#@ Assembly Name="System.Xml.Linq"#>
<#@ assembly name="C:\webtech\THESIS\TsqlParser\TsqlParser\bin\Debug\TsqlParser.dll" #>
<#@ assembly name="C:\Sp_CodeGenerator\ExtensionMethods\bin\x86\Debug\ExtensionMethods.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ include file="EF.Utility.CS.ttinclude" #>

<#
   // insert your template code here the tempalte code will be syntaxhighlighted 
   // and you will have intellisense for all namespaces in the full edition
	//string SampleInputFile = System.IO.File.ReadAllText(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + @"\XMLFiles\AndOrOpertor.xml");
	string	SampleInputFile = System.IO.File.ReadAllText(@"C:\Sp_CodeGenerator\Sp_CodeGenerator\Templates\XMLFiles\AndOrOpertor.xml");
//	string SampleInputFile = System.IO.File.ReadAllText(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\XMLFiles\AndOrOpertor.xml");
	XDocument XmlDoc = Parse(SampleInputFile);
	List<ExtensionMethods.Token> listTokens = ExtensionMethods.ExtensionMethods.getToken(XmlDoc);
	List<ExtensionMethods.Token> preparedTokens = ExtensionMethods.ExtensionMethods.gParams(listTokens);
	string repVariable = ExtensionMethods.ExtensionMethods.createRepVariable(preparedTokens);
	string getObject = ExtensionMethods.ExtensionMethods.gRepObject(preparedTokens);
#>
// This is the output code from your template
// you only get syntax-highlighting here - not intellisense
namespace ExtensionMethods{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Data;
	using DataBaseLayer;

  public class UnitOfWork : IDisposable{

	private AWorksLTEntities context = new AWorksLTEntities();
	<#= repVariable #>

	<#= getObject #>

	public void Save()
        {
            context.SaveChanges();
        }

	private bool disposed = false;

    protected virtual void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    context.Dispose();
                }
            }
            this.disposed = true;
        }

	public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
  }
}
 
<#+
  // Insert any template procedures here
 private XDocument Parse(string Input){ 
	XDocument XmlDoc = System.Xml.Linq.XDocument.Parse(Input);
	return XmlDoc;
}
#>